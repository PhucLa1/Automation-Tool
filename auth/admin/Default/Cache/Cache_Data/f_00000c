{
  "openapi": "3.0.1",
  "info": {
    "title": "HRM-HUMAN RESOURCE MANAGEMENT Test API 1.0",
    "description": "API version 1.0",
    "version": "1.0"
  },
  "paths": {
    "/api/v1/advances": {
      "get": {
        "tags": [
          "Advances"
        ],
        "summary": "Get all advance defination",
        "responses": {
          "200": {
            "description": "Return all the advance defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdvanceResultApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvanceResultApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvanceResultApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Advances"
        ],
        "summary": "Add new advance defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvanceUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvanceUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AdvanceUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when inserted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/advances/employee/{employeeId}": {
      "get": {
        "tags": [
          "Advances"
        ],
        "summary": "Get all advance by employee id defination",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the advance by employee id defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdvanceResultApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvanceResultApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvanceResultApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/advances/{id}": {
      "put": {
        "tags": [
          "Advances"
        ],
        "summary": "Update a advance defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvanceUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvanceUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AdvanceUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Advances"
        ],
        "summary": "Delete a advance defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when deleted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/advances/update-status/{id}/{status}": {
      "put": {
        "tags": [
          "Advances"
        ],
        "summary": "Update advance status by id: just for role admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AdvanceStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/allowances": {
      "get": {
        "tags": [
          "Allowances"
        ],
        "summary": "Get all allowances in company",
        "responses": {
          "200": {
            "description": "Return all the allowances in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AllowanceResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fuel Allowance","amount":200000,"terms":"Term for fuel","parameterName":"???"},{"id":2,"name":"Food Allowance","amount":200000,"terms":"Term for food","parameterName":"???"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowanceResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fuel Allowance","amount":200000,"terms":"Term for fuel","parameterName":"???"},{"id":2,"name":"Food Allowance","amount":200000,"terms":"Term for food","parameterName":"???"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowanceResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fuel Allowance","amount":200000,"terms":"Term for fuel","parameterName":"???"},{"id":2,"name":"Food Allowance","amount":200000,"terms":"Term for food","parameterName":"???"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Allowances"
        ],
        "summary": "Add new allowance in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowanceUpsert"
              },
              "example": {"name":"Phụ cấp nhiên liệu","amount":200000,"terms":"Nhân viên sẽ được hỗ trợ chi phí đi lại với mức phụ cấp nhiên liệu hoặc vé xe công cộng theo mức cố định hàng tháng","parameterName":"???"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowanceUpsert"
              },
              "example": {"name":"Phụ cấp nhiên liệu","amount":200000,"terms":"Nhân viên sẽ được hỗ trợ chi phí đi lại với mức phụ cấp nhiên liệu hoặc vé xe công cộng theo mức cố định hàng tháng","parameterName":"???"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllowanceUpsert"
              },
              "example": {"name":"Phụ cấp nhiên liệu","amount":200000,"terms":"Nhân viên sẽ được hỗ trợ chi phí đi lại với mức phụ cấp nhiên liệu hoặc vé xe công cộng theo mức cố định hàng tháng","parameterName":"???"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/allowances/{id}": {
      "put": {
        "tags": [
          "Allowances"
        ],
        "summary": "Update a allowance in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowanceUpsert"
              },
              "example": {"name":"Phụ cấp nhiên liệu","amount":200000,"terms":"Nhân viên sẽ được hỗ trợ chi phí đi lại với mức phụ cấp nhiên liệu hoặc vé xe công cộng theo mức cố định hàng tháng","parameterName":"???"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowanceUpsert"
              },
              "example": {"name":"Phụ cấp nhiên liệu","amount":200000,"terms":"Nhân viên sẽ được hỗ trợ chi phí đi lại với mức phụ cấp nhiên liệu hoặc vé xe công cộng theo mức cố định hàng tháng","parameterName":"???"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllowanceUpsert"
              },
              "example": {"name":"Phụ cấp nhiên liệu","amount":200000,"terms":"Nhân viên sẽ được hỗ trợ chi phí đi lại với mức phụ cấp nhiên liệu hoặc vé xe công cộng theo mức cố định hàng tháng","parameterName":"???"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Allowances"
        ],
        "summary": "Delete a allowance in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/applicants": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Get all applicants",
        "responses": {
          "200": {
            "description": "Return all the applicants in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"John Doe","email":"Kagami@gmail.com","phone":"0123456789","fileDataStore":"C:\\Users\\ADMIN\\HRM\\HRM\\wwwroot\\CV\\Intern_CV_Full_Stack_Developer.pdf","positionId":1,"positionName":"Full Stack Developer","rate":4.5,"testId":1,"testName":"Full Stack Developer Test","interviewerName":"Jane Doe","status":1}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"John Doe","email":"Kagami@gmail.com","phone":"0123456789","fileDataStore":"C:\\Users\\ADMIN\\HRM\\HRM\\wwwroot\\CV\\Intern_CV_Full_Stack_Developer.pdf","positionId":1,"positionName":"Full Stack Developer","rate":4.5,"testId":1,"testName":"Full Stack Developer Test","interviewerName":"Jane Doe","status":1}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"John Doe","email":"Kagami@gmail.com","phone":"0123456789","fileDataStore":"C:\\Users\\ADMIN\\HRM\\HRM\\wwwroot\\CV\\Intern_CV_Full_Stack_Developer.pdf","positionId":1,"positionName":"Full Stack Developer","rate":4.5,"testId":1,"testName":"Full Stack Developer Test","interviewerName":"Jane Doe","status":1}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applicants"
        ],
        "summary": "Add new applicants",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "Phone": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "PositionId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "Rate": {
                    "type": "number",
                    "format": "double"
                  },
                  "TestId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "InterviewerName": {
                    "type": "string"
                  },
                  "Status": {
                    "$ref": "#/components/schemas/ApplicantStatus"
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "Phone": {
                  "style": "form"
                },
                "file": {
                  "style": "form"
                },
                "PositionId": {
                  "style": "form"
                },
                "Rate": {
                  "style": "form"
                },
                "TestId": {
                  "style": "form"
                },
                "InterviewerName": {
                  "style": "form"
                },
                "Status": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/applicants/{id}": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Get all applicants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the applicants in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"John Doe","email":"Kagami@gmail.com","phone":"0123456789","fileDataStore":"C:\\Users\\ADMIN\\HRM\\HRM\\wwwroot\\CV\\Intern_CV_Full_Stack_Developer.pdf","positionId":1,"positionName":"Full Stack Developer","rate":4.5,"testId":1,"testName":"Full Stack Developer Test","interviewerName":"Jane Doe","status":1}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"John Doe","email":"Kagami@gmail.com","phone":"0123456789","fileDataStore":"C:\\Users\\ADMIN\\HRM\\HRM\\wwwroot\\CV\\Intern_CV_Full_Stack_Developer.pdf","positionId":1,"positionName":"Full Stack Developer","rate":4.5,"testId":1,"testName":"Full Stack Developer Test","interviewerName":"Jane Doe","status":1}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"John Doe","email":"Kagami@gmail.com","phone":"0123456789","fileDataStore":"C:\\Users\\ADMIN\\HRM\\HRM\\wwwroot\\CV\\Intern_CV_Full_Stack_Developer.pdf","positionId":1,"positionName":"Full Stack Developer","rate":4.5,"testId":1,"testName":"Full Stack Developer Test","interviewerName":"Jane Doe","status":1}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Applicants"
        ],
        "summary": "Delete a applicant by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/applicants/update/{id}": {
      "put": {
        "tags": [
          "Applicants"
        ],
        "summary": "Update a applicant in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantUpsert"
              },
              "example": {"name":"John Doe","email":"somebody1@gmail.com","phone":"0123456789","file":null,"positionId":1,"rate":4.5,"testId":1,"interviewerName":"Jane Doe","status":0}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantUpsert"
              },
              "example": {"name":"John Doe","email":"somebody1@gmail.com","phone":"0123456789","file":null,"positionId":1,"rate":4.5,"testId":1,"interviewerName":"Jane Doe","status":0}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantUpsert"
              },
              "example": {"name":"John Doe","email":"somebody1@gmail.com","phone":"0123456789","file":null,"positionId":1,"rate":4.5,"testId":1,"interviewerName":"Jane Doe","status":0}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/applicants/update-point/{id}": {
      "put": {
        "tags": [
          "Applicants"
        ],
        "summary": "Update a applicant in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "point",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/admin-login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "This endpoint is login in page admin",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLogin"
              },
              "example": {"email":"phucminhbeos@gmail.com","password":"Phucdeptrai"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLogin"
              },
              "example": {"email":"phucminhbeos@gmail.com","password":"Phucdeptrai"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLogin"
              },
              "example": {"email":"phucminhbeos@gmail.com","password":"Phucdeptrai"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/employee-login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "This endpoint is login in page user",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLogin"
              },
              "example": {"email":"phucminhbeos@gmail.com","password":"Phucdeptrai"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLogin"
              },
              "example": {"email":"phucminhbeos@gmail.com","password":"Phucdeptrai"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLogin"
              },
              "example": {"email":"phucminhbeos@gmail.com","password":"Phucdeptrai"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/get-current-user": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "This endpoint get the info of current user",
        "description": "This endpoint allows clients to fetch details about the logged-in user, \r\nincluding user profile information, preferences, and any relevant settings. \r\nIt is useful for personalizing user experience and managing user-specific data.\r\n<br> \r\nAbout Role : \r\n<br>\r\n1 : Admin\r\n<br>\r\n2 : Partime\r\n<br> \r\n3 : FullTime \r\n",
        "responses": {
          "200": {
            "description": "Return all the bonus defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoApiResponse"
                },
                "example": {"metadata":{"id":1,"email":"admin@gmail.com","name":"admin","role":1},"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoApiResponse"
                },
                "example": {"metadata":{"id":1,"email":"admin@gmail.com","name":"admin","role":1},"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoApiResponse"
                },
                "example": {"metadata":{"id":1,"email":"admin@gmail.com","name":"admin","role":1},"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/log-out": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "This endpoint will remove the jwt token and log out the web",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/update-account/{id}": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "This endpoint will update the information of account user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              },
              "example": {"userName":"Lã Hồng Phúc","password":"Phucdeptrai","email":"phucminhbeos@gmail.com"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              },
              "example": {"userName":"Lã Hồng Phúc","password":"Phucdeptrai","email":"phucminhbeos@gmail.com"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              },
              "example": {"userName":"Lã Hồng Phúc","password":"Phucdeptrai","email":"phucminhbeos@gmail.com"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/bonus": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get all bonus defination",
        "responses": {
          "200": {
            "description": "Return all the bonus defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BonusResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Thưởng doanh số tháng 10","amount":100000,"parameterName":"PARAM_BONUS_KPI10"},{"id":2,"name":"Leader dự án A thành công","amount":150000,"parameterName":"PARAM_BONUS_PROJECTA"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BonusResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Thưởng doanh số tháng 10","amount":100000,"parameterName":"PARAM_BONUS_KPI10"},{"id":2,"name":"Leader dự án A thành công","amount":150000,"parameterName":"PARAM_BONUS_PROJECTA"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BonusResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Thưởng doanh số tháng 10","amount":100000,"parameterName":"PARAM_BONUS_KPI10"},{"id":2,"name":"Leader dự án A thành công","amount":150000,"parameterName":"PARAM_BONUS_PROJECTA"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Add new bonus defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BonusUpsert"
              },
              "example": {"name":"Bonus example","amount":100000,"parameterName":"PARAM_BONUS_EXAMPLE"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BonusUpsert"
              },
              "example": {"name":"Bonus example","amount":100000,"parameterName":"PARAM_BONUS_EXAMPLE"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BonusUpsert"
              },
              "example": {"name":"Bonus example","amount":100000,"parameterName":"PARAM_BONUS_EXAMPLE"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when inserted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/bonus/{id}": {
      "put": {
        "tags": [
          "Bonus"
        ],
        "summary": "Update a bonus defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BonusUpsert"
              },
              "example": {"name":"Bonus example","amount":100000,"parameterName":"PARAM_BONUS_EXAMPLE"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BonusUpsert"
              },
              "example": {"name":"Bonus example","amount":100000,"parameterName":"PARAM_BONUS_EXAMPLE"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BonusUpsert"
              },
              "example": {"name":"Bonus example","amount":100000,"parameterName":"PARAM_BONUS_EXAMPLE"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bonus"
        ],
        "summary": "Delete a bonus defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when deleted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/calendars": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "This endpoint will get all calendar in database",
        "responses": {
          "200": {
            "description": "Return all the calendar in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResultListApiResponse"
                },
                "example": {"metadata":[{"shiftTime":1,"calendarResult":[{"id":0,"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1},{"id":0,"day":2,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}]}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResultListApiResponse"
                },
                "example": {"metadata":[{"shiftTime":1,"calendarResult":[{"id":0,"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1},{"id":0,"day":2,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}]}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResultListApiResponse"
                },
                "example": {"metadata":[{"shiftTime":1,"calendarResult":[{"id":0,"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1},{"id":0,"day":2,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}]}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "This endpoint will add new work schedule",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpsert"
              },
              "example": {"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpsert"
              },
              "example": {"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpsert"
              },
              "example": {"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/calendars/{id}": {
      "put": {
        "tags": [
          "Calendars"
        ],
        "summary": "This endpoint will update a schedule by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schedule to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated schedule details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpsert"
              },
              "example": {"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpsert"
              },
              "example": {"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpsert"
              },
              "example": {"day":1,"timeEnd":"12:00:00","timeStart":"08:00:00","shiftTime":1}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "This endpoint will remove a schedule by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schedule to remove",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Get all Contracts in company",
        "responses": {
          "200": {
            "description": "Return all the Contracts in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContractResultApiResponse"
                },
                "example": {"metadata":[{"id":0,"contractSalaryId":1,"baseSalary":0,"baseInsurance":0,"requiredDays":0,"wageDaily":0,"requiredHours":0,"wageHourly":0,"factor":0,"contractTypeId":1,"contractTypeName":null,"departmentId":1,"departmentName":null,"positionId":1,"positionName":null,"startDate":"2024-11-21T23:01:54.3959306+07:00","endDate":"2029-11-21T23:01:54.3959313+07:00","fileURL":null,"employeeSignStatus":0,"companySignStatus":0,"contractStatus":0,"typeContract":1,"name":"Nguyen Van A","dateOfBirth":"2004-11-21T23:01:54.3959329+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.3959333+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science","allowanceResults":null,"insuranceResults":null,"fireUrlBase":null,"fileUrlSigned":null}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractResultApiResponse"
                },
                "example": {"metadata":[{"id":0,"contractSalaryId":1,"baseSalary":0,"baseInsurance":0,"requiredDays":0,"wageDaily":0,"requiredHours":0,"wageHourly":0,"factor":0,"contractTypeId":1,"contractTypeName":null,"departmentId":1,"departmentName":null,"positionId":1,"positionName":null,"startDate":"2024-11-21T23:01:54.3959306+07:00","endDate":"2029-11-21T23:01:54.3959313+07:00","fileURL":null,"employeeSignStatus":0,"companySignStatus":0,"contractStatus":0,"typeContract":1,"name":"Nguyen Van A","dateOfBirth":"2004-11-21T23:01:54.3959329+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.3959333+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science","allowanceResults":null,"insuranceResults":null,"fireUrlBase":null,"fileUrlSigned":null}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractResultApiResponse"
                },
                "example": {"metadata":[{"id":0,"contractSalaryId":1,"baseSalary":0,"baseInsurance":0,"requiredDays":0,"wageDaily":0,"requiredHours":0,"wageHourly":0,"factor":0,"contractTypeId":1,"contractTypeName":null,"departmentId":1,"departmentName":null,"positionId":1,"positionName":null,"startDate":"2024-11-21T23:01:54.3959306+07:00","endDate":"2029-11-21T23:01:54.3959313+07:00","fileURL":null,"employeeSignStatus":0,"companySignStatus":0,"contractStatus":0,"typeContract":1,"name":"Nguyen Van A","dateOfBirth":"2004-11-21T23:01:54.3959329+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.3959333+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science","allowanceResults":null,"insuranceResults":null,"fireUrlBase":null,"fileUrlSigned":null}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Add new Contracts by HR",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpsert"
              },
              "example": {"contractSalaryId":1,"contractTypeId":1,"departmentId":1,"positionId":1,"startDate":"2024-11-21T23:01:54.3989042+07:00","endDate":"2029-11-21T23:01:54.3989046+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":[1,2],"name":"John Doe","dateOfBirth":"2004-11-21T23:01:54.3989097+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.3989101+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpsert"
              },
              "example": {"contractSalaryId":1,"contractTypeId":1,"departmentId":1,"positionId":1,"startDate":"2024-11-21T23:01:54.3989042+07:00","endDate":"2029-11-21T23:01:54.3989046+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":[1,2],"name":"John Doe","dateOfBirth":"2004-11-21T23:01:54.3989097+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.3989101+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpsert"
              },
              "example": {"contractSalaryId":1,"contractTypeId":1,"departmentId":1,"positionId":1,"startDate":"2024-11-21T23:01:54.3989042+07:00","endDate":"2029-11-21T23:01:54.3989046+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":[1,2],"name":"John Doe","dateOfBirth":"2004-11-21T23:01:54.3989097+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.3989101+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/applicants/{applicantId}": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Add new Contracts in the company when HR create contracts",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractAdd"
              },
              "example": {"name":null,"contractSalaryId":1,"contractTypeId":1,"startDate":"2024-11-21T23:01:54.4023496+07:00","endDate":"2029-11-21T23:01:54.4023507+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":null}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractAdd"
              },
              "example": {"name":null,"contractSalaryId":1,"contractTypeId":1,"startDate":"2024-11-21T23:01:54.4023496+07:00","endDate":"2029-11-21T23:01:54.4023507+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":null}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractAdd"
              },
              "example": {"name":null,"contractSalaryId":1,"contractTypeId":1,"startDate":"2024-11-21T23:01:54.4023496+07:00","endDate":"2029-11-21T23:01:54.4023507+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":null}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{id}": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "This endpoint will update a contract by id when applicants fill form",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the contract to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The contract schedule details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpdate"
              },
              "example": {"name":"Lã Hồng Phúc","dateOfBirth":"2000-03-03T00:00:00","gender":true,"address":"26/231 Trần Nguyên Hãn, Lê Chân, Hải Phòng","countrySide":"Ngũ Phúc, Kiến Thụy","nationalID":"031203000167","nationalStartDate":"0001-01-01T00:00:00","nationalAddress":"Cục kiểm soát Hải Phòng","level":"Thạc sĩ","major":"Công nghệ thông tin"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpdate"
              },
              "example": {"name":"Lã Hồng Phúc","dateOfBirth":"2000-03-03T00:00:00","gender":true,"address":"26/231 Trần Nguyên Hãn, Lê Chân, Hải Phòng","countrySide":"Ngũ Phúc, Kiến Thụy","nationalID":"031203000167","nationalStartDate":"0001-01-01T00:00:00","nationalAddress":"Cục kiểm soát Hải Phòng","level":"Thạc sĩ","major":"Công nghệ thông tin"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpdate"
              },
              "example": {"name":"Lã Hồng Phúc","dateOfBirth":"2000-03-03T00:00:00","gender":true,"address":"26/231 Trần Nguyên Hãn, Lê Chân, Hải Phòng","countrySide":"Ngũ Phúc, Kiến Thụy","nationalID":"031203000167","nationalStartDate":"0001-01-01T00:00:00","nationalAddress":"Cục kiểm soát Hải Phòng","level":"Thạc sĩ","major":"Công nghệ thông tin"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      },
      "delete": {
        "tags": [
          "Contracts"
        ],
        "summary": "Delete a Contract in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/update-contract/{id}": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Update the whole contract?",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpsert"
              },
              "example": {"contractSalaryId":1,"contractTypeId":1,"departmentId":1,"positionId":1,"startDate":"2024-11-21T23:01:54.4067283+07:00","endDate":"2029-11-21T23:01:54.4067296+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":[1,2],"name":"John Doe","dateOfBirth":"2004-11-21T23:01:54.4067379+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.4067386+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpsert"
              },
              "example": {"contractSalaryId":1,"contractTypeId":1,"departmentId":1,"positionId":1,"startDate":"2024-11-21T23:01:54.4067283+07:00","endDate":"2029-11-21T23:01:54.4067296+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":[1,2],"name":"John Doe","dateOfBirth":"2004-11-21T23:01:54.4067379+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.4067386+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpsert"
              },
              "example": {"contractSalaryId":1,"contractTypeId":1,"departmentId":1,"positionId":1,"startDate":"2024-11-21T23:01:54.4067283+07:00","endDate":"2029-11-21T23:01:54.4067296+07:00","typeContract":1,"allowanceIds":[1,2],"insuranceIds":[1,2],"name":"John Doe","dateOfBirth":"2004-11-21T23:01:54.4067379+07:00","gender":true,"address":"Ha Noi","countrySide":"Hai Phong","nationalID":"008203000069","nationalStartDate":"2019-11-21T23:01:54.4067386+07:00","nationalAddress":"Hai Phong","level":"Bachelor","major":"Computer Science"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully"
          }
        }
      }
    },
    "/api/v1/contracts/update-status/{id}/{status}": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Update advance status by id: just for role admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContractStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/add-employee-signature/{contractId}": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Sign contract by employee",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "CertificateFile": {
                    "type": "string",
                    "format": "binary"
                  },
                  "SignatureImageFile": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Reason": {
                    "type": "string"
                  },
                  "Location": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "CertificateFile": {
                  "style": "form"
                },
                "SignatureImageFile": {
                  "style": "form"
                },
                "Reason": {
                  "style": "form"
                },
                "Location": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status after signing the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/create-contract-pdf/{contractId}": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Sign contract by employee",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return status after signing the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ContractSalarys": {
      "get": {
        "tags": [
          "ContractSalarys"
        ],
        "summary": "Get all ContractSalarys in company",
        "responses": {
          "200": {
            "description": "Return all the ContractSalarys in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContractSalaryResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"baseSalary":5000000,"baseInsurance":1000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1},{"id":2,"baseSalary":8000000,"baseInsurance":1000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractSalaryResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"baseSalary":5000000,"baseInsurance":1000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1},{"id":2,"baseSalary":8000000,"baseInsurance":1000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractSalaryResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"baseSalary":5000000,"baseInsurance":1000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1},{"id":2,"baseSalary":8000000,"baseInsurance":1000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ContractSalarys"
        ],
        "summary": "Add new ContractSalary in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractSalaryUpsert"
              },
              "example": {"baseSalary":5000000,"baseInsurance":5000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractSalaryUpsert"
              },
              "example": {"baseSalary":5000000,"baseInsurance":5000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractSalaryUpsert"
              },
              "example": {"baseSalary":5000000,"baseInsurance":5000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ContractSalarys/{id}": {
      "put": {
        "tags": [
          "ContractSalarys"
        ],
        "summary": "Update a ContractSalary in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractSalaryUpsert"
              },
              "example": {"baseSalary":5000000,"baseInsurance":5000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractSalaryUpsert"
              },
              "example": {"baseSalary":5000000,"baseInsurance":5000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractSalaryUpsert"
              },
              "example": {"baseSalary":5000000,"baseInsurance":5000000,"requiredDays":30,"requiredHours":8,"wageDaily":200,"wageHourly":30,"factor":1}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContractSalarys"
        ],
        "summary": "Delete a ContractSalary in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ContractTypes": {
      "get": {
        "tags": [
          "ContractTypes"
        ],
        "summary": "Get all ContractTypes in company",
        "responses": {
          "200": {
            "description": "Return all the ContractTypes in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContractTypeResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fixed-term contract"},{"id":2,"name":"Permanent contract"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractTypeResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fixed-term contract"},{"id":2,"name":"Permanent contract"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractTypeResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fixed-term contract"},{"id":2,"name":"Permanent contract"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ContractTypes"
        ],
        "summary": "Add new ContractType in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeUpsert"
              },
              "example": {"name":"Fixed-term contract"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeUpsert"
              },
              "example": {"name":"Fixed-term contract"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeUpsert"
              },
              "example": {"name":"Fixed-term contract"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ContractTypes/{id}": {
      "put": {
        "tags": [
          "ContractTypes"
        ],
        "summary": "Update a ContractType in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeUpsert"
              },
              "example": {"name":"Fixed-term contract"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeUpsert"
              },
              "example": {"name":"Fixed-term contract"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeUpsert"
              },
              "example": {"name":"Fixed-term contract"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContractTypes"
        ],
        "summary": "Delete a ContractType in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/dashboards/employee-count-by-base-salary": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get all employee count by base salary",
        "responses": {
          "200": {
            "description": "Return all employee count by base salary in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/all-flexible-dashboards": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get all page flexible dashboard",
        "responses": {
          "200": {
            "description": "Returnall page flexible dashboard in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/create-flexible-dashboards": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Add new flexible dashboard",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/dashboards/charts": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Add new chart in flexible dashboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChartUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChartUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChartUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/dashboards/{pageId}/charts": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get all charts by page id",
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all charts by page id in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/job-posting-count": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get job posting count",
        "responses": {
          "200": {
            "description": "Return number of job posting in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/applicant-count-by-position": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get all applicant count by position",
        "responses": {
          "200": {
            "description": "Return all applicant count by position in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/applicant-count": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get applicant count",
        "responses": {
          "200": {
            "description": "Return number of applicant in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/leave-applications-today": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get all leave application today",
        "responses": {
          "200": {
            "description": "Return all leave application today in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/expiring-contracts": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get all contract before expiring date 30 days",
        "parameters": [
          {
            "name": "expirationDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all contract before expiring date 30 days in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/advances-by-pay-period": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get all advances during pay period",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all advance during pay period in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/dashboards/flexible-dashboard": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/deductions": {
      "get": {
        "tags": [
          "Deductions"
        ],
        "summary": "Get all deductions defination",
        "responses": {
          "200": {
            "description": "Return all the deductions defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeductionResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Đi làm muộn","amount":100000,"parameterName":"PARAM_DEDUCTION_LATE"},{"id":2,"name":"Vi phạm nội quy 3","amount":150000,"parameterName":"PARAM_DEDUCTION_RULE3"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeductionResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Đi làm muộn","amount":100000,"parameterName":"PARAM_DEDUCTION_LATE"},{"id":2,"name":"Vi phạm nội quy 3","amount":150000,"parameterName":"PARAM_DEDUCTION_RULE3"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeductionResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Đi làm muộn","amount":100000,"parameterName":"PARAM_DEDUCTION_LATE"},{"id":2,"name":"Vi phạm nội quy 3","amount":150000,"parameterName":"PARAM_DEDUCTION_RULE3"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Deductions"
        ],
        "summary": "Add new deduction defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeductionUpsert"
              },
              "example": {"name":"Deduction example","amount":100000,"parameterName":"PARAM_DEDUCTION_EXAMPLE"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeductionUpsert"
              },
              "example": {"name":"Deduction example","amount":100000,"parameterName":"PARAM_DEDUCTION_EXAMPLE"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeductionUpsert"
              },
              "example": {"name":"Deduction example","amount":100000,"parameterName":"PARAM_DEDUCTION_EXAMPLE"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when inserted successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deductions/{id}": {
      "put": {
        "tags": [
          "Deductions"
        ],
        "summary": "Update a deduction defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeductionUpsert"
              },
              "example": {"name":"Deduction example","amount":100000,"parameterName":"PARAM_DEDUCTION_EXAMPLE"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeductionUpsert"
              },
              "example": {"name":"Deduction example","amount":100000,"parameterName":"PARAM_DEDUCTION_EXAMPLE"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeductionUpsert"
              },
              "example": {"name":"Deduction example","amount":100000,"parameterName":"PARAM_DEDUCTION_EXAMPLE"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Deductions"
        ],
        "summary": "Delete a deduction defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when deleted successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/departments/{id}/employee": {
      "get": {
        "tags": [
          "Departments"
        ],
        "summary": "Get all user name, email in department by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the user name, email in the department in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentUserResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Lã Hồng Phúc","email":"phucminhbeos@gmail.com"},{"id":2,"name":"Nguyễn Thành Hưng","email":"hugnt@gmail.com"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentUserResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Lã Hồng Phúc","email":"phucminhbeos@gmail.com"},{"id":2,"name":"Nguyễn Thành Hưng","email":"hugnt@gmail.com"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentUserResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Lã Hồng Phúc","email":"phucminhbeos@gmail.com"},{"id":2,"name":"Nguyễn Thành Hưng","email":"hugnt@gmail.com"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/departments/employee-count": {
      "get": {
        "tags": [
          "Departments"
        ],
        "summary": "Get the count of employees in each department",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentEmployeeCountResultListApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentEmployeeCountResultListApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentEmployeeCountResultListApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/departments": {
      "get": {
        "tags": [
          "Departments"
        ],
        "summary": "Get all departments in company",
        "responses": {
          "200": {
            "description": "Return all the departments in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Human Resources department","managerName":"Lã Hồng Phúc","managerId":1},{"id":2,"name":"Engineering department","managerName":"Nguyễn Thành Hưng","managerId":2},{"id":3,"name":"System a department","managerName":"Trịnh Gia Khánh","managerId":3}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Human Resources department","managerName":"Lã Hồng Phúc","managerId":1},{"id":2,"name":"Engineering department","managerName":"Nguyễn Thành Hưng","managerId":2},{"id":3,"name":"System a department","managerName":"Trịnh Gia Khánh","managerId":3}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Human Resources department","managerName":"Lã Hồng Phúc","managerId":1},{"id":2,"name":"Engineering department","managerName":"Nguyễn Thành Hưng","managerId":2},{"id":3,"name":"System a department","managerName":"Trịnh Gia Khánh","managerId":3}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Departments"
        ],
        "summary": "Add new department in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      }
    },
    "/api/v1/departments/{id}": {
      "put": {
        "tags": [
          "Departments"
        ],
        "summary": "Update a department in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DepartmentUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      },
      "delete": {
        "tags": [
          "Departments"
        ],
        "summary": "Delete a department in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      }
    },
    "/api/v1/employees/regis-face/{id}": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Add face regis to employee to use face recognition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "faceRegises": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FaceRegis"
                    }
                  }
                }
              },
              "encoding": {
                "faceRegises": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      }
    },
    "/api/v1/employees/{id}/employee-images": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get all face regis in company by employee id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the  face regis in company by employee id in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FaceRegisResultListApiResponse"
                },
                "example": {"metadata":[{"id":0,"url":"1.png","statusFaceTurn":4,"descriptor":"{'0' : '0,111', ..}"},{"id":0,"url":"2.png","statusFaceTurn":3,"descriptor":"{'0' : '0,111', ..}"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceRegisResultListApiResponse"
                },
                "example": {"metadata":[{"id":0,"url":"1.png","statusFaceTurn":4,"descriptor":"{'0' : '0,111', ..}"},{"id":0,"url":"2.png","statusFaceTurn":3,"descriptor":"{'0' : '0,111', ..}"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceRegisResultListApiResponse"
                },
                "example": {"metadata":[{"id":0,"url":"1.png","statusFaceTurn":4,"descriptor":"{'0' : '0,111', ..}"},{"id":0,"url":"2.png","statusFaceTurn":3,"descriptor":"{'0' : '0,111', ..}"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get all employee defination",
        "responses": {
          "200": {
            "description": "Return all the employee defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResultListApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResultListApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResultListApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Add new employee defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when inserted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/employees/contract/{contractId}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get employee infor by contract id defination",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return selected employee by contract id defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResultApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResultApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResultApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/employees/contract/not-inused": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get list contract id not in used defination",
        "responses": {
          "200": {
            "description": "Return contract id not in used defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32ApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32ApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/employees/{id}": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update a employee defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employees"
        ],
        "summary": "Delete a employee defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when deleted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/employees/send-login-info": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Send login information to employee defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when sent succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/employees/current-profile": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get current profile of current user",
        "responses": {
          "200": {
            "description": "Return the current user profile defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetailApiResponse"
                },
                "example": {"metadata":{"userName":"john_doe","password":"securepassword123","email":"johndoe@example.com","typeContract":"Full-time","departmentName":"IT Department","positionName":"Software Engineer","contractTypeName":"Permanent","name":"John Doe","dob":"1990-05-15T00:00:00","address":"123 Main Street, Springfield","gender":"Male","countryside":"Springfield","nationalId":"123456789","level":"Bachelor's Degree","major":"Computer Science","baseSalary":50000,"baseInsurance":5000,"requiredDays":22,"requiredHours":160,"wageDaily":200,"wageHourly":25,"factor":1.5,"fireUrlBase":"https://example.com/files/base_document.pdf","fileUrlSigned":"https://example.com/files/signed_document.pdf","contractId":null,"employeeSignStatus":0},"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetailApiResponse"
                },
                "example": {"metadata":{"userName":"john_doe","password":"securepassword123","email":"johndoe@example.com","typeContract":"Full-time","departmentName":"IT Department","positionName":"Software Engineer","contractTypeName":"Permanent","name":"John Doe","dob":"1990-05-15T00:00:00","address":"123 Main Street, Springfield","gender":"Male","countryside":"Springfield","nationalId":"123456789","level":"Bachelor's Degree","major":"Computer Science","baseSalary":50000,"baseInsurance":5000,"requiredDays":22,"requiredHours":160,"wageDaily":200,"wageHourly":25,"factor":1.5,"fireUrlBase":"https://example.com/files/base_document.pdf","fileUrlSigned":"https://example.com/files/signed_document.pdf","contractId":null,"employeeSignStatus":0},"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetailApiResponse"
                },
                "example": {"metadata":{"userName":"john_doe","password":"securepassword123","email":"johndoe@example.com","typeContract":"Full-time","departmentName":"IT Department","positionName":"Software Engineer","contractTypeName":"Permanent","name":"John Doe","dob":"1990-05-15T00:00:00","address":"123 Main Street, Springfield","gender":"Male","countryside":"Springfield","nationalId":"123456789","level":"Bachelor's Degree","major":"Computer Science","baseSalary":50000,"baseInsurance":5000,"requiredDays":22,"requiredHours":160,"wageDaily":200,"wageHourly":25,"factor":1.5,"fireUrlBase":"https://example.com/files/base_document.pdf","fileUrlSigned":"https://example.com/files/signed_document.pdf","contractId":null,"employeeSignStatus":0},"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/employees/update-regis-face/{id}": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update face regis to employee to use face recognition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "faceRegisUpdates": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FaceRegisUpdate"
                    }
                  }
                }
              },
              "encoding": {
                "faceRegisUpdates": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      }
    },
    "/api/v1/employees/get-all-labeled": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get all employee label description",
        "responses": {
          "200": {
            "description": "Return all the employee label description in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LabelDescriptionsListApiResponse"
                },
                "example": {"metadata":[{"name":"Label A","id":1,"descriptions":["{'0' : '0,111', ..}","{'0' : '0,111', ..}"]},{"name":"Label B","id":2,"descriptions":["{'0' : '0,111', ..}","{'0' : '0,111', ..}"]}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelDescriptionsListApiResponse"
                },
                "example": {"metadata":[{"name":"Label A","id":1,"descriptions":["{'0' : '0,111', ..}","{'0' : '0,111', ..}"]},{"name":"Label B","id":2,"descriptions":["{'0' : '0,111', ..}","{'0' : '0,111', ..}"]}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelDescriptionsListApiResponse"
                },
                "example": {"metadata":[{"name":"Label A","id":1,"descriptions":["{'0' : '0,111', ..}","{'0' : '0,111', ..}"]},{"name":"Label B","id":2,"descriptions":["{'0' : '0,111', ..}","{'0' : '0,111', ..}"]}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/fomulas": {
      "get": {
        "tags": [
          "Fomulas"
        ],
        "summary": "Get all fomulas defination",
        "responses": {
          "200": {
            "description": "Return all the fomulas defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FomulaResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Công thức tính lương 2022","parameterName":"","fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức chính thức 2022"},{"id":2,"name":"Công thức tính lương T7/2022","parameterName":"","fomulaDetail":"(PARAM_BONUS_KPI10-PARAM_DEDUCTION_LATE)*PARAM_TAXRATE_5","note":"Công thức tính lương dịch"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FomulaResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Công thức tính lương 2022","parameterName":"","fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức chính thức 2022"},{"id":2,"name":"Công thức tính lương T7/2022","parameterName":"","fomulaDetail":"(PARAM_BONUS_KPI10-PARAM_DEDUCTION_LATE)*PARAM_TAXRATE_5","note":"Công thức tính lương dịch"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FomulaResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Công thức tính lương 2022","parameterName":"","fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức chính thức 2022"},{"id":2,"name":"Công thức tính lương T7/2022","parameterName":"","fomulaDetail":"(PARAM_BONUS_KPI10-PARAM_DEDUCTION_LATE)*PARAM_TAXRATE_5","note":"Công thức tính lương dịch"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fomulas"
        ],
        "summary": "Add new fomula defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FomulaUpsert"
              },
              "example": {"name":"Fomula example","parameterName":null,"fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức tính lương mâux"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FomulaUpsert"
              },
              "example": {"name":"Fomula example","parameterName":null,"fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức tính lương mâux"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FomulaUpsert"
              },
              "example": {"name":"Fomula example","parameterName":null,"fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức tính lương mâux"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when inserted successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fomulas/{id}": {
      "put": {
        "tags": [
          "Fomulas"
        ],
        "summary": "Update a fomula defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FomulaUpsert"
              },
              "example": {"name":"Fomula example","parameterName":null,"fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức tính lương mâux"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FomulaUpsert"
              },
              "example": {"name":"Fomula example","parameterName":null,"fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức tính lương mâux"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FomulaUpsert"
              },
              "example": {"name":"Fomula example","parameterName":null,"fomulaDetail":"PARAM_BONUS_KPI10+PARAM_BONUS_PROJECTA-PARAM_DEDUCTION_LATE","note":"Công thức tính lương mâux"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Fomulas"
        ],
        "summary": "Delete a fomula defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when deleted successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fomulas/salary-components": {
      "get": {
        "tags": [
          "Fomulas"
        ],
        "summary": "Get all Salary Components",
        "responses": {
          "200": {
            "description": "Return all the  Salary Components defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SalaryComponentCategoryIEnumerableApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalaryComponentCategoryIEnumerableApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalaryComponentCategoryIEnumerableApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/gmails": {
      "get": {
        "tags": [
          "Gmails"
        ],
        "summary": "Get all gmails",
        "responses": {
          "200": {
            "description": "Return all the gmails in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/insurances": {
      "get": {
        "tags": [
          "Insurances"
        ],
        "summary": "Get all insurances in company",
        "responses": {
          "200": {
            "description": "Return all the insurances in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"},{"id":2,"name":"Social insurance","percentEmployee":11,"percentCompany":21,"parameterName":"???"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"},{"id":2,"name":"Social insurance","percentEmployee":11,"percentCompany":21,"parameterName":"???"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"},{"id":2,"name":"Social insurance","percentEmployee":11,"percentCompany":21,"parameterName":"???"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Insurances"
        ],
        "summary": "Add new insurance in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceUpsert"
              },
              "example": {"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceUpsert"
              },
              "example": {"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceUpsert"
              },
              "example": {"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/insurances/{id}": {
      "put": {
        "tags": [
          "Insurances"
        ],
        "summary": "Update a insurance in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceUpsert"
              },
              "example": {"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceUpsert"
              },
              "example": {"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceUpsert"
              },
              "example": {"name":"Health insurance","percentEmployee":10,"percentCompany":20,"parameterName":"???"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Insurances"
        ],
        "summary": "Delete a insurance in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobpostings": {
      "get": {
        "tags": [
          "JobPostings"
        ],
        "summary": "Get all jobPostings in company",
        "responses": {
          "200": {
            "description": "Return all the jobPostings in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostingResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"positionName":".NET Developer","positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4801034+07:00","expirationDate":"2024-12-21T23:01:54.4801046+07:00","experienceRequired":"3+ years of experience in .NET development","employeeName":"Nguyễn Văn A","employeeId":1},{"id":2,"positionName":".NET Developer","positionId":1,"description":"Cộng tác viên .NET","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4801076+07:00","expirationDate":"2024-12-21T23:01:54.4801076+07:00","experienceRequired":"No experiment","employeeName":"Nguyễn Văn B","employeeId":1}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostingResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"positionName":".NET Developer","positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4801034+07:00","expirationDate":"2024-12-21T23:01:54.4801046+07:00","experienceRequired":"3+ years of experience in .NET development","employeeName":"Nguyễn Văn A","employeeId":1},{"id":2,"positionName":".NET Developer","positionId":1,"description":"Cộng tác viên .NET","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4801076+07:00","expirationDate":"2024-12-21T23:01:54.4801076+07:00","experienceRequired":"No experiment","employeeName":"Nguyễn Văn B","employeeId":1}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPostingResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"positionName":".NET Developer","positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4801034+07:00","expirationDate":"2024-12-21T23:01:54.4801046+07:00","experienceRequired":"3+ years of experience in .NET development","employeeName":"Nguyễn Văn A","employeeId":1},{"id":2,"positionName":".NET Developer","positionId":1,"description":"Cộng tác viên .NET","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4801076+07:00","expirationDate":"2024-12-21T23:01:54.4801076+07:00","experienceRequired":"No experiment","employeeName":"Nguyễn Văn B","employeeId":1}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "JobPostings"
        ],
        "summary": "Add new jobPosting in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostingUpsert"
              },
              "example": {"positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4823986+07:00","expirationDate":"2024-12-21T23:01:54.4823998+07:00","experienceRequired":"3+ years of experience in .NET development","employeeId":1}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostingUpsert"
              },
              "example": {"positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4823986+07:00","expirationDate":"2024-12-21T23:01:54.4823998+07:00","experienceRequired":"3+ years of experience in .NET development","employeeId":1}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostingUpsert"
              },
              "example": {"positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4823986+07:00","expirationDate":"2024-12-21T23:01:54.4823998+07:00","experienceRequired":"3+ years of experience in .NET development","employeeId":1}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobpostings/{id}": {
      "put": {
        "tags": [
          "JobPostings"
        ],
        "summary": "Update a jobPosting in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostingUpsert"
              },
              "example": {"positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4837263+07:00","expirationDate":"2024-12-21T23:01:54.483727+07:00","experienceRequired":"3+ years of experience in .NET development","employeeId":1}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostingUpsert"
              },
              "example": {"positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4837263+07:00","expirationDate":"2024-12-21T23:01:54.483727+07:00","experienceRequired":"3+ years of experience in .NET development","employeeId":1}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostingUpsert"
              },
              "example": {"positionId":1,"description":"Develop and maintain web applications using ASP.NET Core.","location":"Đại Mỗ","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.4837263+07:00","expirationDate":"2024-12-21T23:01:54.483727+07:00","experienceRequired":"3+ years of experience in .NET development","employeeId":1}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JobPostings"
        ],
        "summary": "Delete a jobPosting in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leave-applications": {
      "get": {
        "tags": [
          "LeaveApplications"
        ],
        "summary": "Get all leave applications in company",
        "responses": {
          "200": {
            "description": "Return all the applications in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveApplicationResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null},{"id":2,"employeeId":1,"refuseReason":null,"timeLeave":14,"statusLeave":3,"description":"Xin nghỉ về thăm người nhà","replyMessage":"Không đồng ý"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveApplicationResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null},{"id":2,"employeeId":1,"refuseReason":null,"timeLeave":14,"statusLeave":3,"description":"Xin nghỉ về thăm người nhà","replyMessage":"Không đồng ý"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveApplicationResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null},{"id":2,"employeeId":1,"refuseReason":null,"timeLeave":14,"statusLeave":3,"description":"Xin nghỉ về thăm người nhà","replyMessage":"Không đồng ý"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LeaveApplications"
        ],
        "summary": "Add new leave application in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveApplicationUpSert"
              },
              "example": {"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveApplicationUpSert"
              },
              "example": {"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveApplicationUpSert"
              },
              "example": {"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leave-applications/employee": {
      "get": {
        "tags": [
          "LeaveApplications"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDataResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null},{"id":2,"employeeId":1,"refuseReason":null,"timeLeave":14,"statusLeave":3,"description":"Xin nghỉ về thăm người nhà","replyMessage":"Không đồng ý"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDataResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null},{"id":2,"employeeId":1,"refuseReason":null,"timeLeave":14,"statusLeave":3,"description":"Xin nghỉ về thăm người nhà","replyMessage":"Không đồng ý"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDataResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null},{"id":2,"employeeId":1,"refuseReason":null,"timeLeave":14,"statusLeave":3,"description":"Xin nghỉ về thăm người nhà","replyMessage":"Không đồng ý"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/leave-applications/{id}": {
      "put": {
        "tags": [
          "LeaveApplications"
        ],
        "summary": "Update a leave application in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveApplicationUpSert"
              },
              "example": {"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveApplicationUpSert"
              },
              "example": {"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveApplicationUpSert"
              },
              "example": {"employeeId":1,"refuseReason":null,"timeLeave":13,"statusLeave":1,"description":"Xin nghỉ về thăm người nhà","replyMessage":null}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LeaveApplications"
        ],
        "summary": "Delete a leave application in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payrolls/test": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get test",
        "responses": {
          "200": {
            "description": "Return test in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/company-tree": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get company tree",
        "responses": {
          "200": {
            "description": "Return company tree department->position->employee in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/update-payroll/list": {
      "put": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Update add employee in payroll by period",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollListUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollListUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollListUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status update true/false in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/update-payroll/details": {
      "put": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Update specific payroll of an employee in period",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status update true/false in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/update-payroll/other-sc": {
      "put": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Update other bonus or duduction in payroll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status update true/false in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/update-payroll/bonus-sc": {
      "put": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Update bonus details in payroll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status update true/false in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/update-payroll/deduction-sc": {
      "put": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Update deduction details in payroll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status update true/false in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/update-payroll/formula": {
      "put": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Update payroll formula of list employee in payroll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayrollUpsert"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status update true/false in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/salary-components/{sc_type}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get columns dynamic for bonus / deduction",
        "parameters": [
          {
            "name": "sc_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return columns dynamic for bonus / deduction in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/table-schema/header/{year}/{month}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get table schema for payroll list",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MonthPeriod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return columns dynamic for bunus / deduction in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/table-schema/column/{year}/{month}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get columns dynamic for payroll table",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MonthPeriod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return columns dynamic for payroll table in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/table-schema/history": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get all history saving of payroll",
        "responses": {
          "200": {
            "description": "Return all history saving of payrollin the metadata of api response"
          }
        }
      },
      "post": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Add history",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollHistoryModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollHistoryModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollHistoryModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status of  saving in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/table-schema/history/{payrollHistoryId}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get history saving of payroll bt id (details)",
        "parameters": [
          {
            "name": "payrollHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return history saving of payroll by hisID in the metadata of api response"
          }
        }
      },
      "delete": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get history saving of payroll bt id (details)",
        "parameters": [
          {
            "name": "payrollHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return history deleting of payroll by hisID in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/{year}/{month}": {
      "post": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get columns dynamic for payroll table",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MonthPeriod"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollFilter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollFilter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return columns dynamic for payroll table in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/employee-salary/list/{year}/{month}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get employee payrol list with details sc",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MonthPeriod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all employee payrol list with details sc in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/employee-salary/details/{payrollId}": {
      "get": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Get employee payrol details",
        "parameters": [
          {
            "name": "payrollId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all employee salary components in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/payrolls/employee-salary/payslip/{year}/{month}": {
      "post": {
        "tags": [
          "Payrolls"
        ],
        "summary": "Send payslip for list employee in specific payroll",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MonthPeriod"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollFilter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollFilter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return status of email forwarding in the metadata of api response"
          }
        }
      }
    },
    "/api/v1/positions": {
      "get": {
        "tags": [
          "Positions"
        ],
        "summary": "Get all positions in company",
        "responses": {
          "200": {
            "description": "Return all the positions in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PositionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fullstack Developer","currentPositionsFilled":1,"totalPositionsNeeded":1,"departmentName":"Công nghệ thông tin","departmentId":1},{"id":2,"name":"Kĩ sư công nghệ thông tin","currentPositionsFilled":1,"totalPositionsNeeded":1,"departmentName":"Công nghệ thông tin","departmentId":1}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fullstack Developer","currentPositionsFilled":1,"totalPositionsNeeded":1,"departmentName":"Công nghệ thông tin","departmentId":1},{"id":2,"name":"Kĩ sư công nghệ thông tin","currentPositionsFilled":1,"totalPositionsNeeded":1,"departmentName":"Công nghệ thông tin","departmentId":1}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Fullstack Developer","currentPositionsFilled":1,"totalPositionsNeeded":1,"departmentName":"Công nghệ thông tin","departmentId":1},{"id":2,"name":"Kĩ sư công nghệ thông tin","currentPositionsFilled":1,"totalPositionsNeeded":1,"departmentName":"Công nghệ thông tin","departmentId":1}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Positions"
        ],
        "summary": "Add new position in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionUpsert"
              },
              "example": {"name":"Kĩ sư phần mềm","departmentId":1,"totalPositionsNeeded":5}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionUpsert"
              },
              "example": {"name":"Kĩ sư phần mềm","departmentId":1,"totalPositionsNeeded":5}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PositionUpsert"
              },
              "example": {"name":"Kĩ sư phần mềm","departmentId":1,"totalPositionsNeeded":5}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/positions/{id}": {
      "put": {
        "tags": [
          "Positions"
        ],
        "summary": "Update a position in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionUpsert"
              },
              "example": {"name":"Kĩ sư phần mềm","departmentId":1,"totalPositionsNeeded":5}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PositionUpsert"
              },
              "example": {"name":"Kĩ sư phần mềm","departmentId":1,"totalPositionsNeeded":5}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PositionUpsert"
              },
              "example": {"name":"Kĩ sư phần mềm","departmentId":1,"totalPositionsNeeded":5}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Positions"
        ],
        "summary": "Delete a position in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get all questions in company",
        "responses": {
          "200": {
            "description": "Return all the questions in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"testId":1,"testName":"Test 1","questionText":"Tại sao ?"},{"id":2,"testId":2,"testName":"Test 2","questionText":"Thế nào ?"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"testId":1,"testName":"Test 1","questionText":"Tại sao ?"},{"id":2,"testId":2,"testName":"Test 2","questionText":"Thế nào ?"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"testId":1,"testName":"Test 1","questionText":"Tại sao ?"},{"id":2,"testId":2,"testName":"Test 2","questionText":"Thế nào ?"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Add new question in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionUpsert"
              },
              "example": {"testId":1,"questionText":"Tại sao ?"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionUpsert"
              },
              "example": {"testId":1,"questionText":"Tại sao ?"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionUpsert"
              },
              "example": {"testId":1,"questionText":"Tại sao ?"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/{id}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get all questions from id in company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the questions from id in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"testId":1,"testName":"Test 1","questionText":"Tại sao ?"},{"id":2,"testId":2,"testName":"Test 2","questionText":"Thế nào ?"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"testId":1,"testName":"Test 1","questionText":"Tại sao ?"},{"id":2,"testId":2,"testName":"Test 2","questionText":"Thế nào ?"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"testId":1,"testName":"Test 1","questionText":"Tại sao ?"},{"id":2,"testId":2,"testName":"Test 2","questionText":"Thế nào ?"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Questions"
        ],
        "summary": "Update a question in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionUpsert"
              },
              "example": {"testId":1,"questionText":"Tại sao ?"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionUpsert"
              },
              "example": {"testId":1,"questionText":"Tại sao ?"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionUpsert"
              },
              "example": {"testId":1,"questionText":"Tại sao ?"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Delete a question in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recruitmentwebs": {
      "get": {
        "tags": [
          "RecruitmentWebs"
        ],
        "summary": "Get all recruitmentWebs in company",
        "responses": {
          "200": {
            "description": "Return all the recruitmentWebs in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RecruitmentWebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"webId":1,"name":"Web 1","jobPostingId":1,"description":"Description 1","location":"Location 1","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.53631+07:00","expirationDate":"2024-12-21T23:01:54.5363109+07:00","experienceRequired":"3+ years of experience in .NET development"},{"id":2,"webId":2,"name":"Web 2","jobPostingId":2,"description":"Description 2","location":"Location 2","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.5363125+07:00","expirationDate":"2024-12-21T23:01:54.5363126+07:00","experienceRequired":"No experiment"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecruitmentWebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"webId":1,"name":"Web 1","jobPostingId":1,"description":"Description 1","location":"Location 1","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.53631+07:00","expirationDate":"2024-12-21T23:01:54.5363109+07:00","experienceRequired":"3+ years of experience in .NET development"},{"id":2,"webId":2,"name":"Web 2","jobPostingId":2,"description":"Description 2","location":"Location 2","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.5363125+07:00","expirationDate":"2024-12-21T23:01:54.5363126+07:00","experienceRequired":"No experiment"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecruitmentWebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"webId":1,"name":"Web 1","jobPostingId":1,"description":"Description 1","location":"Location 1","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.53631+07:00","expirationDate":"2024-12-21T23:01:54.5363109+07:00","experienceRequired":"3+ years of experience in .NET development"},{"id":2,"webId":2,"name":"Web 2","jobPostingId":2,"description":"Description 2","location":"Location 2","salaryRangeMin":4000,"salaryRangeMax":8000,"postingDate":"2024-11-21T23:01:54.5363125+07:00","expirationDate":"2024-12-21T23:01:54.5363126+07:00","experienceRequired":"No experiment"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RecruitmentWebs"
        ],
        "summary": "Add new recruitmentWeb in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecruitmentWebUpsert"
              },
              "example": {"jobPostingId":1,"webId":1}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RecruitmentWebUpsert"
              },
              "example": {"jobPostingId":1,"webId":1}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RecruitmentWebUpsert"
              },
              "example": {"jobPostingId":1,"webId":1}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recruitmentwebs/{id}": {
      "delete": {
        "tags": [
          "RecruitmentWebs"
        ],
        "summary": "Delete a recruitmentWeb in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax-deductions": {
      "get": {
        "tags": [
          "TaxDeductions"
        ],
        "summary": "Get all Tax Deduction defination",
        "responses": {
          "200": {
            "description": "Return all the taxDeductions defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDeductionResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Giảm trừ gia cảnh","amount":100000,"terms":"Nhà có con nhỏ","parameterName":"PARAM_TAXDEDUCTION_GIACANH"},{"id":2,"name":"Giảm trừ các nhân đóng thuế","amount":2000000,"terms":"Cá nhân đóng thuế được giảm","parameterName":"PARAM_TAXDEDUCTION_PERSONAL"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDeductionResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Giảm trừ gia cảnh","amount":100000,"terms":"Nhà có con nhỏ","parameterName":"PARAM_TAXDEDUCTION_GIACANH"},{"id":2,"name":"Giảm trừ các nhân đóng thuế","amount":2000000,"terms":"Cá nhân đóng thuế được giảm","parameterName":"PARAM_TAXDEDUCTION_PERSONAL"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDeductionResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Giảm trừ gia cảnh","amount":100000,"terms":"Nhà có con nhỏ","parameterName":"PARAM_TAXDEDUCTION_GIACANH"},{"id":2,"name":"Giảm trừ các nhân đóng thuế","amount":2000000,"terms":"Cá nhân đóng thuế được giảm","parameterName":"PARAM_TAXDEDUCTION_PERSONAL"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaxDeductions"
        ],
        "summary": "Add new Tax Deduction defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxDeductionUpsert"
              },
              "example": {"name":"Tax Deduction example","amount":100000,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","terms":"Khoản giảm trừ thuế mới theo pháp luật"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxDeductionUpsert"
              },
              "example": {"name":"Tax Deduction example","amount":100000,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","terms":"Khoản giảm trừ thuế mới theo pháp luật"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaxDeductionUpsert"
              },
              "example": {"name":"Tax Deduction example","amount":100000,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","terms":"Khoản giảm trừ thuế mới theo pháp luật"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when inserted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax-deductions/{id}": {
      "put": {
        "tags": [
          "TaxDeductions"
        ],
        "summary": "Update a Tax Deduction defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxDeductionUpsert"
              },
              "example": {"name":"Tax Deduction example","amount":100000,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","terms":"Khoản giảm trừ thuế mới theo pháp luật"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxDeductionUpsert"
              },
              "example": {"name":"Tax Deduction example","amount":100000,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","terms":"Khoản giảm trừ thuế mới theo pháp luật"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaxDeductionUpsert"
              },
              "example": {"name":"Tax Deduction example","amount":100000,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","terms":"Khoản giảm trừ thuế mới theo pháp luật"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxDeductions"
        ],
        "summary": "Delete a Tax Deduction defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when deleted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax-rates": {
      "get": {
        "tags": [
          "TaxRates"
        ],
        "summary": "Get all Tax Rate defination",
        "responses": {
          "200": {
            "description": "Return all the taxRates defination in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Lũy tiến 5%","parameterName":"PARAM_TAXRATE_5","percent":0.05,"condition":"Thu nhập tính thuế > 11tr","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0},{"id":2,"name":"Lũy tiến 10%","parameterName":"PARAM_TAXRATE_10","percent":0.1,"condition":"Thu nhập tính thuế > 20tr","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Lũy tiến 5%","parameterName":"PARAM_TAXRATE_5","percent":0.05,"condition":"Thu nhập tính thuế > 11tr","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0},{"id":2,"name":"Lũy tiến 10%","parameterName":"PARAM_TAXRATE_10","percent":0.1,"condition":"Thu nhập tính thuế > 20tr","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateResultApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Lũy tiến 5%","parameterName":"PARAM_TAXRATE_5","percent":0.05,"condition":"Thu nhập tính thuế > 11tr","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0},{"id":2,"name":"Lũy tiến 10%","parameterName":"PARAM_TAXRATE_10","percent":0.1,"condition":"Thu nhập tính thuế > 20tr","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaxRates"
        ],
        "summary": "Add new Tax Rate defination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpsert"
              },
              "example": {"name":"Tax Rate example","percent":0.05,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","condition":"Thu nhập tính thuế > ?tr theo luật mới","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpsert"
              },
              "example": {"name":"Tax Rate example","percent":0.05,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","condition":"Thu nhập tính thuế > ?tr theo luật mới","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpsert"
              },
              "example": {"name":"Tax Rate example","percent":0.05,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","condition":"Thu nhập tính thuế > ?tr theo luật mới","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when inserted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax-rates/{id}": {
      "put": {
        "tags": [
          "TaxRates"
        ],
        "summary": "Update a Tax Rate defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpsert"
              },
              "example": {"name":"Tax Rate example","percent":0.05,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","condition":"Thu nhập tính thuế > ?tr theo luật mới","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpsert"
              },
              "example": {"name":"Tax Rate example","percent":0.05,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","condition":"Thu nhập tính thuế > ?tr theo luật mới","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpsert"
              },
              "example": {"name":"Tax Rate example","percent":0.05,"parameterName":"PARAM_TAXDEDUCTION_EXAMPLE","condition":"Thu nhập tính thuế > ?tr theo luật mới","minTaxIncome":0,"maxTaxIncome":0,"minusAmount":0}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response when updated succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxRates"
        ],
        "summary": "Delete a Tax Rate defination by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response when deleted succesfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/testResults": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get all testResults",
        "responses": {
          "200": {
            "description": "Return all the testResults in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"questionsId":1,"applicantId":1,"applicantTestId":1,"point":4.5,"comment":"Good job"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"questionsId":1,"applicantId":1,"applicantTestId":1,"point":4.5,"comment":"Good job"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"questionsId":1,"applicantId":1,"applicantTestId":1,"point":4.5,"comment":"Good job"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TestResults"
        ],
        "summary": "Add new testResults",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestResultUpsert"
              },
              "example": {"questionsId":1,"applicantId":1,"point":4.5,"comment":"Good job"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestResultUpsert"
              },
              "example": {"questionsId":1,"applicantId":1,"point":4.5,"comment":"Good job"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestResultUpsert"
              },
              "example": {"questionsId":1,"applicantId":1,"point":4.5,"comment":"Good job"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/testResults/{id}": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get all testResults by testId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the testResults in the company by testId in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"questionsId":1,"applicantId":1,"applicantTestId":1,"point":4.5,"comment":"Good job"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"questionsId":1,"applicantId":1,"applicantTestId":1,"point":4.5,"comment":"Good job"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"questionsId":1,"applicantId":1,"applicantTestId":1,"point":4.5,"comment":"Good job"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TestResults"
        ],
        "summary": "Update a testResult in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestResultUpsert"
              },
              "example": {"questionsId":1,"applicantId":1,"point":4.5,"comment":"Good job"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestResultUpsert"
              },
              "example": {"questionsId":1,"applicantId":1,"point":4.5,"comment":"Good job"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestResultUpsert"
              },
              "example": {"questionsId":1,"applicantId":1,"point":4.5,"comment":"Good job"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TestResults"
        ],
        "summary": "Delete a testResult by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/testResults/list": {
      "post": {
        "tags": [
          "TestResults"
        ],
        "summary": "Add new testResults",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestResultUpsert"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestResultUpsert"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestResultUpsert"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tests": {
      "get": {
        "tags": [
          "Tests"
        ],
        "summary": "Get all tests in company",
        "responses": {
          "200": {
            "description": "Return all the tests in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultsListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Programming Fundamentals","description":"A test to measure understanding of basic programming concepts."},{"id":2,"name":"Logical Reasoning Test","description":"This test measures logical thinking and problem-solving skills."}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultsListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Programming Fundamentals","description":"A test to measure understanding of basic programming concepts."},{"id":2,"name":"Logical Reasoning Test","description":"This test measures logical thinking and problem-solving skills."}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultsListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Programming Fundamentals","description":"A test to measure understanding of basic programming concepts."},{"id":2,"name":"Logical Reasoning Test","description":"This test measures logical thinking and problem-solving skills."}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tests"
        ],
        "summary": "Add new test in the company",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestUpsert"
              },
              "example": {"name":"Test for something ","description":"Blah Blah Blah"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestUpsert"
              },
              "example": {"name":"Test for something ","description":"Blah Blah Blah"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestUpsert"
              },
              "example": {"name":"Test for something ","description":"Blah Blah Blah"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tests/{id}": {
      "put": {
        "tags": [
          "Tests"
        ],
        "summary": "Update a test in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestUpsert"
              },
              "example": {"name":"Test for something ","description":"Blah Blah Blah"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestUpsert"
              },
              "example": {"name":"Test for something ","description":"Blah Blah Blah"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestUpsert"
              },
              "example": {"name":"Test for something ","description":"Blah Blah Blah"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tests"
        ],
        "summary": "Delete a test in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/webs": {
      "get": {
        "tags": [
          "Webs"
        ],
        "summary": "Get all webs",
        "responses": {
          "200": {
            "description": "Return all the webs in the company in the metadata of api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webs"
        ],
        "summary": "Add new webs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebUpsert"
              },
              "example": {"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebUpsert"
              },
              "example": {"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebUpsert"
              },
              "example": {"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/webs/{id}": {
      "put": {
        "tags": [
          "Webs"
        ],
        "summary": "Update a web in the company by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebUpsert"
              },
              "example": {"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebUpsert"
              },
              "example": {"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebUpsert"
              },
              "example": {"name":"Linkedin","webApi":"https://api.linkedin.com/v2/ugcPosts"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webs"
        ],
        "summary": "Delete a web by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/register-shift": {
      "post": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Register shift from employee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkPlanInsert"
              },
              "example": {"timeStart":"2024-10-18","timeEnd":"2024-10-25","statusCalendar":2,"dayWorks":[{"shiftTime":2,"presentShift":"2024-10-18"},{"shiftTime":2,"presentShift":"2024-10-19"}]}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkPlanInsert"
              },
              "example": {"timeStart":"2024-10-18","timeEnd":"2024-10-25","statusCalendar":2,"dayWorks":[{"shiftTime":2,"presentShift":"2024-10-18"},{"shiftTime":2,"presentShift":"2024-10-19"}]}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkPlanInsert"
              },
              "example": {"timeStart":"2024-10-18","timeEnd":"2024-10-25","statusCalendar":2,"dayWorks":[{"shiftTime":2,"presentShift":"2024-10-18"},{"shiftTime":2,"presentShift":"2024-10-19"}]}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/get-all-partimeplans": {
      "get": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Get all partime plans from employee",
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":2,"createdAt":"0001-01-01T00:00:00","employeeName":"La Hong Phuc","diffTime":7},{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":2,"createdAt":"0001-01-01T00:00:00","employeeName":"La Hong Phuc","diffTime":7},{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":2,"createdAt":"0001-01-01T00:00:00","employeeName":"La Hong Phuc","diffTime":7},{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/get-partimeplans-by-current-employee": {
      "get": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Get all partime plans by current partime employee",
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":2,"createdAt":"0001-01-01T00:00:00","employeeName":"La Hong Phuc","diffTime":7},{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":2,"createdAt":"0001-01-01T00:00:00","employeeName":"La Hong Phuc","diffTime":7},{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultListApiResponse"
                },
                "example": {"metadata":[{"id":1,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":2,"createdAt":"0001-01-01T00:00:00","employeeName":"La Hong Phuc","diffTime":7},{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/seeding-data-automation": {
      "post": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Seeding data for 3 tables : usercalendar, history, partimeplan",
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      }
    },
    "/api/v1/work-shifts/get-partimeplan/{partimePlanId}": {
      "get": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Get  partime plans by id from employee",
        "parameters": [
          {
            "name": "partimePlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultApiResponse"
                },
                "example": {"metadata":{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7},"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultApiResponse"
                },
                "example": {"metadata":{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7},"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartimePlanResultApiResponse"
                },
                "example": {"metadata":{"id":2,"timeStart":"2024-10-19","timeEnd":"2024-10-26","statusCalendar":3,"createdAt":"0001-01-01T00:00:00","employeeName":"Pham Thi Lan Anh","diffTime":7},"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/get-all-workshifts/{partimePlanId}": {
      "get": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Get all work shift from partime plan - (yyyy-mm-dd)",
        "parameters": [
          {
            "name": "partimePlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserCalendarResultListApiResponse"
                },
                "example": {"metadata":[{"shiftTime":3,"isCheck":false,"presentShift":"2024-10-19","userCalendarStatus":1},{"shiftTime":2,"isCheck":false,"presentShift":"2024-10-19","userCalendarStatus":1}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCalendarResultListApiResponse"
                },
                "example": {"metadata":[{"shiftTime":3,"isCheck":false,"presentShift":"2024-10-19","userCalendarStatus":1},{"shiftTime":2,"isCheck":false,"presentShift":"2024-10-19","userCalendarStatus":1}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCalendarResultListApiResponse"
                },
                "example": {"metadata":[{"shiftTime":3,"isCheck":false,"presentShift":"2024-10-19","userCalendarStatus":1},{"shiftTime":2,"isCheck":false,"presentShift":"2024-10-19","userCalendarStatus":1}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/process-partimeplan/{partimePlanId}": {
      "put": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Process request of partime plan from employee",
        "parameters": [
          {
            "name": "partimePlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statusCalendar",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StatusCalendar"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response"
          }
        }
      }
    },
    "/api/v1/work-shifts/get-all-user-calendar-by-employee/{employeeId}": {
      "get": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Get all work shift by employee id - (yyyy-mm-dd)",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEntryListListApiResponse"
                },
                "example": {"metadata":[{"dayOfWeek":"Sunday","date":"2024-10-29","userCalendarResult":[{"shiftTime":1,"isCheck":true,"presentShift":"2024-10-29","userCalendarStatus":2},{"shiftTime":2,"isCheck":true,"presentShift":"2024-10-29","userCalendarStatus":2}],"historyEntryResults":{"Morning":[{"id":1,"statusHistory":1,"timeSweep":"2024-10-29T09:00:00","employeeId":1},{"id":2,"statusHistory":2,"timeSweep":"2024-10-29T12:00:00","employeeId":1}]}},{"dayOfWeek":"Sunday","date":"2024-10-30","userCalendarResult":[{"shiftTime":1,"isCheck":true,"presentShift":"2024-10-30","userCalendarStatus":2},{"shiftTime":2,"isCheck":true,"presentShift":"2024-10-30","userCalendarStatus":2}],"historyEntryResults":{"Morning":[{"id":3,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":4,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]}}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEntryListListApiResponse"
                },
                "example": {"metadata":[{"dayOfWeek":"Sunday","date":"2024-10-29","userCalendarResult":[{"shiftTime":1,"isCheck":true,"presentShift":"2024-10-29","userCalendarStatus":2},{"shiftTime":2,"isCheck":true,"presentShift":"2024-10-29","userCalendarStatus":2}],"historyEntryResults":{"Morning":[{"id":1,"statusHistory":1,"timeSweep":"2024-10-29T09:00:00","employeeId":1},{"id":2,"statusHistory":2,"timeSweep":"2024-10-29T12:00:00","employeeId":1}]}},{"dayOfWeek":"Sunday","date":"2024-10-30","userCalendarResult":[{"shiftTime":1,"isCheck":true,"presentShift":"2024-10-30","userCalendarStatus":2},{"shiftTime":2,"isCheck":true,"presentShift":"2024-10-30","userCalendarStatus":2}],"historyEntryResults":{"Morning":[{"id":3,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":4,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]}}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEntryListListApiResponse"
                },
                "example": {"metadata":[{"dayOfWeek":"Sunday","date":"2024-10-29","userCalendarResult":[{"shiftTime":1,"isCheck":true,"presentShift":"2024-10-29","userCalendarStatus":2},{"shiftTime":2,"isCheck":true,"presentShift":"2024-10-29","userCalendarStatus":2}],"historyEntryResults":{"Morning":[{"id":1,"statusHistory":1,"timeSweep":"2024-10-29T09:00:00","employeeId":1},{"id":2,"statusHistory":2,"timeSweep":"2024-10-29T12:00:00","employeeId":1}]}},{"dayOfWeek":"Sunday","date":"2024-10-30","userCalendarResult":[{"shiftTime":1,"isCheck":true,"presentShift":"2024-10-30","userCalendarStatus":2},{"shiftTime":2,"isCheck":true,"presentShift":"2024-10-30","userCalendarStatus":2}],"historyEntryResults":{"Morning":[{"id":3,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":4,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]}}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/get-total-work-hours": {
      "post": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Get all work shift by employee id - (yyyy-mm-dd)",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TotalWorkHoursListApiResponse"
                },
                "example": {"metadata":[{"employeeId":1,"totalWorkedHours":48},{"employeeId":2,"totalWorkedHours":49}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalWorkHoursListApiResponse"
                },
                "example": {"metadata":[{"employeeId":1,"totalWorkedHours":48},{"employeeId":2,"totalWorkedHours":49}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalWorkHoursListApiResponse"
                },
                "example": {"metadata":[{"employeeId":1,"totalWorkedHours":48},{"employeeId":2,"totalWorkedHours":49}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/get-all-attendance-by-fulltime-employee/{employeeId}": {
      "get": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Get all history result by employee id - (yyyy-mm-dd) - fulltime",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeAttendanceRecordListApiResponse"
                },
                "example": {"metadata":[{"dayOfWeek":"Sunday","date":"2024-10-30","historyResults":[{"id":3,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":4,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]},{"dayOfWeek":"Monday","date":"2024-10-31","historyResults":[{"id":5,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":6,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]}],"message":null,"isSuccess":true}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeAttendanceRecordListApiResponse"
                },
                "example": {"metadata":[{"dayOfWeek":"Sunday","date":"2024-10-30","historyResults":[{"id":3,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":4,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]},{"dayOfWeek":"Monday","date":"2024-10-31","historyResults":[{"id":5,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":6,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]}],"message":null,"isSuccess":true}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeAttendanceRecordListApiResponse"
                },
                "example": {"metadata":[{"dayOfWeek":"Sunday","date":"2024-10-30","historyResults":[{"id":3,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":4,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]},{"dayOfWeek":"Monday","date":"2024-10-31","historyResults":[{"id":5,"statusHistory":1,"timeSweep":"2024-10-30T09:00:00","employeeId":1},{"id":6,"statusHistory":2,"timeSweep":"2024-10-30T12:00:00","employeeId":1}]}],"message":null,"isSuccess":true}
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/print-partime-work-shift-to-excel/{employeeId}": {
      "post": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Print work shift of partime employee to excel",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/print-fulltime-attendance-to-excel/{employeeId}": {
      "post": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Print history attendance of fulltime employee to excel",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/check-in-out-employee/{employeeId}": {
      "post": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Check in out of employee",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryUpsert"
              },
              "example": {"statusHistory":1,"timeSweep":"2024-10-29T12:00:00"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryUpsert"
              },
              "example": {"statusHistory":1,"timeSweep":"2024-10-29T12:00:00"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryUpsert"
              },
              "example": {"statusHistory":1,"timeSweep":"2024-10-29T12:00:00"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/work-shifts/history/{id}": {
      "put": {
        "tags": [
          "WorkShifts"
        ],
        "summary": "Update the attendance tracking of employee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryUpsert"
              },
              "example": {"statusHistory":1,"timeSweep":"2024-10-29T12:00:00"}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryUpsert"
              },
              "example": {"statusHistory":1,"timeSweep":"2024-10-29T12:00:00"}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HistoryUpsert"
              },
              "example": {"statusHistory":1,"timeSweep":"2024-10-29T12:00:00"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the api response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "additionalProperties": false
      },
      "AccountInfoApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/AccountInfo"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AccountLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountUpdate": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdvanceResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "$ref": "#/components/schemas/MonthPeriod"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "payPeriod": {
            "type": "string",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "departmentName": {
            "type": "string",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AdvanceStatus"
          },
          "statusName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdvanceResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/AdvanceResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AdvanceStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "AdvanceUpsert": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "$ref": "#/components/schemas/MonthPeriod"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AdvanceStatus"
          }
        },
        "additionalProperties": false
      },
      "AllowanceResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "terms": {
            "type": "string",
            "nullable": true
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AllowanceResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/AllowanceResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AllowanceUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "terms": {
            "type": "string",
            "nullable": true
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicantResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fileDataStore": {
            "type": "string",
            "nullable": true
          },
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "testName": {
            "type": "string",
            "nullable": true
          },
          "interviewerName": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ApplicantStatus"
          }
        },
        "additionalProperties": false
      },
      "ApplicantResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicantResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ApplicantStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ApplicantUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "file": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "interviewerName": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ApplicantStatus"
          }
        },
        "additionalProperties": false
      },
      "BonusResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BonusResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/BonusResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BonusUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BooleanApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "boolean"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CalendarEntry": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "$ref": "#/components/schemas/DateOnly"
          },
          "userCalendarResult": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCalendarResult"
            },
            "nullable": true
          },
          "historyEntryResults": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HistoryResult"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CalendarEntryListListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CalendarEntry"
              }
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CalendarResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "$ref": "#/components/schemas/Day"
          },
          "timeEnd": {
            "$ref": "#/components/schemas/TimeOnly"
          },
          "timeStart": {
            "$ref": "#/components/schemas/TimeOnly"
          },
          "shiftTime": {
            "$ref": "#/components/schemas/ShiftTime"
          }
        },
        "additionalProperties": false
      },
      "CalendarResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CalendarUpsert": {
        "type": "object",
        "properties": {
          "day": {
            "$ref": "#/components/schemas/Day"
          },
          "timeEnd": {
            "$ref": "#/components/schemas/TimeOnly"
          },
          "timeStart": {
            "$ref": "#/components/schemas/TimeOnly"
          },
          "shiftTime": {
            "$ref": "#/components/schemas/ShiftTime"
          }
        },
        "additionalProperties": false
      },
      "ChartType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "ChartUpsert": {
        "type": "object",
        "properties": {
          "pageFlexibleDashboardId": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "firstDescription": {
            "type": "string",
            "nullable": true
          },
          "secondDescription": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "chartType": {
            "$ref": "#/components/schemas/ChartType"
          }
        },
        "additionalProperties": false
      },
      "ColumnTableHeader": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "field": {
            "type": "string",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "listIdBelongTo": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "listParentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "rowSpan": {
            "type": "integer",
            "format": "int32"
          },
          "colSpan": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CompanySignStatus": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ContractAdd": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "contractSalaryId": {
            "type": "integer",
            "format": "int32"
          },
          "contractTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "typeContract": {
            "$ref": "#/components/schemas/TypeContract"
          },
          "allowanceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "insuranceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "format": "double"
          },
          "contractSalaryId": {
            "type": "integer",
            "format": "int32"
          },
          "baseSalary": {
            "type": "number",
            "format": "double"
          },
          "baseInsurance": {
            "type": "number",
            "format": "double"
          },
          "requiredDays": {
            "type": "integer",
            "format": "int32"
          },
          "wageDaily": {
            "type": "number",
            "format": "double"
          },
          "requiredHours": {
            "type": "integer",
            "format": "int32"
          },
          "wageHourly": {
            "type": "number",
            "format": "double"
          },
          "factor": {
            "type": "number",
            "format": "double"
          },
          "contractTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "contractTypeName": {
            "type": "string",
            "nullable": true
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "departmentName": {
            "type": "string",
            "nullable": true
          },
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "fileURL": {
            "type": "string",
            "nullable": true
          },
          "employeeSignStatus": {
            "$ref": "#/components/schemas/EmployeeSignStatus"
          },
          "companySignStatus": {
            "$ref": "#/components/schemas/CompanySignStatus"
          },
          "contractStatus": {
            "$ref": "#/components/schemas/ContractStatus"
          },
          "typeContract": {
            "$ref": "#/components/schemas/TypeContract"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "boolean"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "countrySide": {
            "type": "string",
            "nullable": true
          },
          "nationalID": {
            "type": "string",
            "nullable": true
          },
          "nationalStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "nationalAddress": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "nullable": true
          },
          "major": {
            "type": "string",
            "nullable": true
          },
          "allowanceResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowanceResult"
            },
            "nullable": true
          },
          "insuranceResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsuranceResult"
            },
            "nullable": true
          },
          "fireUrlBase": {
            "type": "string",
            "nullable": true
          },
          "fileUrlSigned": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ContractResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContractSalaryResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "baseSalary": {
            "type": "number",
            "format": "double"
          },
          "baseInsurance": {
            "type": "number",
            "format": "double"
          },
          "requiredDays": {
            "type": "integer",
            "format": "int32"
          },
          "requiredHours": {
            "type": "integer",
            "format": "int32"
          },
          "wageDaily": {
            "type": "number",
            "format": "double"
          },
          "wageHourly": {
            "type": "number",
            "format": "double"
          },
          "factor": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ContractSalaryResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ContractSalaryResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContractSalaryUpsert": {
        "type": "object",
        "properties": {
          "baseSalary": {
            "type": "number",
            "format": "double"
          },
          "baseInsurance": {
            "type": "number",
            "format": "double"
          },
          "requiredDays": {
            "type": "integer",
            "format": "int32"
          },
          "requiredHours": {
            "type": "integer",
            "format": "int32"
          },
          "wageDaily": {
            "type": "number",
            "format": "double"
          },
          "wageHourly": {
            "type": "number",
            "format": "double"
          },
          "factor": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ContractStatus": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "ContractTypeResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractTypeResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ContractTypeResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContractTypeUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "boolean"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "countrySide": {
            "type": "string",
            "nullable": true
          },
          "nationalID": {
            "type": "string",
            "nullable": true
          },
          "nationalStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "nationalAddress": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "nullable": true
          },
          "major": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractUpsert": {
        "type": "object",
        "properties": {
          "contractSalaryId": {
            "type": "integer",
            "format": "int32"
          },
          "contractTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "typeContract": {
            "$ref": "#/components/schemas/TypeContract"
          },
          "allowanceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "insuranceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "boolean"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "countrySide": {
            "type": "string",
            "nullable": true
          },
          "nationalID": {
            "type": "string",
            "nullable": true
          },
          "nationalStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "nationalAddress": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "nullable": true
          },
          "major": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateOnly": {
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "dayOfYear": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "dayNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Day": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "DayOfWeek": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "DeductionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeductionResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/DeductionResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DeductionUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentEmployeeCountResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "employeeCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentEmployeeCountResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentEmployeeCountResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DepartmentResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "managerName": {
            "type": "string",
            "nullable": true
          },
          "managerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/DepartmentResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DepartmentUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "managerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentUserResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentUserResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentUserResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DynamicColumn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "field": {
            "type": "string",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "listIdBelongTo": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeAttendanceRecord": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "$ref": "#/components/schemas/DateOnly"
          },
          "historyResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoryResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeAttendanceRecordListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeAttendanceRecord"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeDataResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeDataResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeDataResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "tenure": {
            "type": "integer",
            "format": "int32"
          },
          "gender": {
            "type": "boolean"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "countrySide": {
            "type": "string",
            "nullable": true
          },
          "nationalID": {
            "type": "string",
            "nullable": true
          },
          "nationalStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "nationalAddress": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "nullable": true
          },
          "major": {
            "type": "string",
            "nullable": true
          },
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "departmentName": {
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "contractId": {
            "type": "integer",
            "format": "int32"
          },
          "taxDeductionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/EmployeeResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeSignStatus": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EmployeeUpsert": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "taxDeductionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceRegis": {
        "type": "object",
        "properties": {
          "faceFile": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "statusFaceTurn": {
            "$ref": "#/components/schemas/StatusFaceTurn"
          },
          "descriptor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceRegisResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "statusFaceTurn": {
            "$ref": "#/components/schemas/StatusFaceTurn"
          },
          "descriptor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceRegisResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaceRegisResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FaceRegisUpdate": {
        "type": "object",
        "properties": {
          "faceFile": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "statusFaceTurn": {
            "$ref": "#/components/schemas/StatusFaceTurn"
          },
          "descriptor": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FomulaResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          },
          "fomulaDetail": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FomulaResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/FomulaResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FomulaUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          },
          "fomulaDetail": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HistoryResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "statusHistory": {
            "$ref": "#/components/schemas/StatusHistory"
          },
          "timeSweep": {
            "type": "string",
            "format": "date-time"
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "HistoryUpsert": {
        "type": "object",
        "properties": {
          "statusHistory": {
            "$ref": "#/components/schemas/StatusHistory"
          },
          "timeSweep": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "InsuranceResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "percentEmployee": {
            "type": "number",
            "format": "double"
          },
          "percentCompany": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InsuranceResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/InsuranceResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "InsuranceUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "percentEmployee": {
            "type": "number",
            "format": "double"
          },
          "percentCompany": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int32ApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "JobPostingResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "salaryRangeMin": {
            "type": "integer",
            "format": "int32"
          },
          "salaryRangeMax": {
            "type": "integer",
            "format": "int32"
          },
          "postingDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "experienceRequired": {
            "type": "string",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "JobPostingResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobPostingResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "JobPostingUpsert": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "salaryRangeMin": {
            "type": "integer",
            "format": "int32"
          },
          "salaryRangeMax": {
            "type": "integer",
            "format": "int32"
          },
          "postingDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "experienceRequired": {
            "type": "string",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LabelDescriptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "descriptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LabelDescriptionsListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelDescriptions"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LeaveApplicationResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "refuseReason": {
            "type": "string",
            "nullable": true
          },
          "timeLeave": {
            "type": "integer",
            "format": "int32"
          },
          "statusLeave": {
            "$ref": "#/components/schemas/StatusLeave"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "replyMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaveApplicationResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaveApplicationResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LeaveApplicationUpSert": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "refuseReason": {
            "type": "string",
            "nullable": true
          },
          "timeLeave": {
            "type": "integer",
            "format": "int32"
          },
          "statusLeave": {
            "$ref": "#/components/schemas/StatusLeave"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "replyMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MonthPeriod": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ],
        "type": "integer",
        "format": "int32"
      },
      "PartimePlanResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "timeStart": {
            "$ref": "#/components/schemas/DateOnly"
          },
          "timeEnd": {
            "$ref": "#/components/schemas/DateOnly"
          },
          "statusCalendar": {
            "$ref": "#/components/schemas/StatusCalendar"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "diffTime": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PartimePlanResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PartimePlanResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PartimePlanResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartimePlanResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PayrollFilter": {
        "type": "object",
        "properties": {
          "dfrom": {
            "type": "string",
            "nullable": true
          },
          "dto": {
            "type": "string",
            "nullable": true
          },
          "employeeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayrollHistoryModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "month": {
            "$ref": "#/components/schemas/MonthPeriod"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "payrollHeader": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ColumnTableHeader"
              }
            },
            "nullable": true
          },
          "payrollColumn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicColumn"
            },
            "nullable": true
          },
          "payrollData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrollTableData"
            },
            "nullable": true
          },
          "displayColumns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicColumn"
            },
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayrollListUpsert": {
        "type": "object",
        "properties": {
          "period": {
            "$ref": "#/components/schemas/PayrollPeriod"
          },
          "employeeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayrollPeriod": {
        "type": "object",
        "properties": {
          "month": {
            "$ref": "#/components/schemas/MonthPeriod"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PayrollTableData": {
        "type": "object",
        "properties": {
          "payrollId": {
            "type": "integer",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "contractId": {
            "type": "integer",
            "format": "int32"
          },
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "departmentName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "dateHired": {
            "type": "string",
            "nullable": true
          },
          "dp": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayrollUpsert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "$ref": "#/components/schemas/MonthPeriod"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "contractId": {
            "type": "integer",
            "format": "int32"
          },
          "otherDeduction": {
            "type": "number",
            "format": "double"
          },
          "otherBonus": {
            "type": "number",
            "format": "double"
          },
          "fomulaId": {
            "type": "integer",
            "format": "int32"
          },
          "listBonusIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "listDeductionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "currentPositionsFilled": {
            "type": "integer",
            "format": "int32"
          },
          "totalPositionsNeeded": {
            "type": "integer",
            "format": "int32"
          },
          "departmentName": {
            "type": "string",
            "nullable": true
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PositionResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PositionUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "totalPositionsNeeded": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProfileDetail": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "typeContract": {
            "type": "string",
            "nullable": true
          },
          "departmentName": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "contractTypeName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "countryside": {
            "type": "string",
            "nullable": true
          },
          "nationalId": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "nullable": true
          },
          "major": {
            "type": "string",
            "nullable": true
          },
          "baseSalary": {
            "type": "number",
            "format": "double"
          },
          "baseInsurance": {
            "type": "number",
            "format": "double"
          },
          "requiredDays": {
            "type": "integer",
            "format": "int32"
          },
          "requiredHours": {
            "type": "integer",
            "format": "int32"
          },
          "wageDaily": {
            "type": "number",
            "format": "double"
          },
          "wageHourly": {
            "type": "number",
            "format": "double"
          },
          "factor": {
            "type": "number",
            "format": "double"
          },
          "fireUrlBase": {
            "type": "string",
            "nullable": true
          },
          "fileUrlSigned": {
            "type": "string",
            "nullable": true
          },
          "contractId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "employeeSignStatus": {
            "$ref": "#/components/schemas/EmployeeSignStatus"
          }
        },
        "additionalProperties": false
      },
      "ProfileDetailApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ProfileDetail"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "QuestionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "testName": {
            "type": "string",
            "nullable": true
          },
          "questionText": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuestionResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "QuestionUpsert": {
        "type": "object",
        "properties": {
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "questionText": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecruitmentWebResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "webId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "jobPostingId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "salaryRangeMin": {
            "type": "integer",
            "format": "int32"
          },
          "salaryRangeMax": {
            "type": "integer",
            "format": "int32"
          },
          "postingDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "experienceRequired": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecruitmentWebResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecruitmentWebResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RecruitmentWebUpsert": {
        "type": "object",
        "properties": {
          "jobPostingId": {
            "type": "integer",
            "format": "int32"
          },
          "webId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "SalaryComponent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SalaryComponentCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "listSalaryComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalaryComponent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SalaryComponentCategoryIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalaryComponentCategory"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ShiftTime": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "StatusCalendar": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "StatusFaceTurn": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "StatusHistory": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "StatusLeave": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "StringApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TaxDeductionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "terms": {
            "type": "string",
            "nullable": true
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxDeductionResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/TaxDeductionResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TaxDeductionUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          },
          "terms": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxRateResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          },
          "percent": {
            "type": "number",
            "format": "double"
          },
          "condition": {
            "type": "string",
            "nullable": true
          },
          "minTaxIncome": {
            "type": "number",
            "format": "double"
          },
          "maxTaxIncome": {
            "type": "number",
            "format": "double"
          },
          "minusAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TaxRateResultApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/TaxRateResult"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TaxRateUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "percent": {
            "type": "number",
            "format": "double"
          },
          "parameterName": {
            "type": "string",
            "nullable": true
          },
          "condition": {
            "type": "string",
            "nullable": true
          },
          "minTaxIncome": {
            "type": "number",
            "format": "double"
          },
          "maxTaxIncome": {
            "type": "number",
            "format": "double"
          },
          "minusAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TestResultResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "questionsId": {
            "type": "integer",
            "format": "int32"
          },
          "applicantId": {
            "type": "integer",
            "format": "int32"
          },
          "applicantTestId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "point": {
            "type": "number",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TestResultUpsert": {
        "type": "object",
        "properties": {
          "questionsId": {
            "type": "integer",
            "format": "int32"
          },
          "applicantId": {
            "type": "integer",
            "format": "int32"
          },
          "point": {
            "type": "number",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResults": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultsListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResults"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TestUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeOnly": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "millisecond": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "microsecond": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nanosecond": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ticks": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TotalWorkHours": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "totalWorkedHours": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TotalWorkHoursListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalWorkHours"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TypeContract": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "UserCalendarInsert": {
        "type": "object",
        "properties": {
          "shiftTime": {
            "$ref": "#/components/schemas/ShiftTime"
          },
          "presentShift": {
            "$ref": "#/components/schemas/DateOnly"
          }
        },
        "additionalProperties": false
      },
      "UserCalendarResult": {
        "type": "object",
        "properties": {
          "shiftTime": {
            "$ref": "#/components/schemas/ShiftTime"
          },
          "isCheck": {
            "type": "boolean"
          },
          "presentShift": {
            "$ref": "#/components/schemas/DateOnly"
          },
          "userCalendarStatus": {
            "$ref": "#/components/schemas/UserCalendarStatus"
          }
        },
        "additionalProperties": false
      },
      "UserCalendarResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCalendarResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserCalendarStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "WebResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "webApi": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebResultListApiResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebResult"
            },
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WebUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "webApi": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkPlanInsert": {
        "type": "object",
        "properties": {
          "timeStart": {
            "$ref": "#/components/schemas/DateOnly"
          },
          "timeEnd": {
            "$ref": "#/components/schemas/DateOnly"
          },
          "statusCalendar": {
            "$ref": "#/components/schemas/StatusCalendar"
          },
          "dayWorks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCalendarInsert"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}